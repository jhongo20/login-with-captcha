// <auto-generated />
using System;
using AuthSystem.Infrastructure.Persistence;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace AuthSystem.Infrastructure.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    [Migration("20250421202649_AddModulesTable")]
    partial class AddModulesTable
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.0")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("AuthSystem.Domain.Entities.Module", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<int>("DisplayOrder")
                        .HasColumnType("int");

                    b.Property<string>("Icon")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<bool>("IsEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTime?>("LastModifiedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("LastModifiedBy")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<Guid?>("ParentId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Route")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("UpdatedBy")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("Name")
                        .IsUnique();

                    b.HasIndex("ParentId");

                    b.ToTable("Modules", (string)null);
                });

            modelBuilder.Entity("AuthSystem.Domain.Entities.Permission", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<DateTime?>("LastModifiedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("LastModifiedBy")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("Id");

                    b.HasIndex("Name")
                        .IsUnique();

                    b.ToTable("Permissions", (string)null);

                    b.HasData(
                        new
                        {
                            Id = new Guid("607d2005-63f7-4cfc-b9ab-b16077bf041c"),
                            CreatedAt = new DateTime(2025, 4, 21, 20, 26, 49, 130, DateTimeKind.Utc).AddTicks(4045),
                            CreatedBy = "System",
                            Description = "Ver usuarios",
                            IsActive = true,
                            LastModifiedAt = new DateTime(2025, 4, 21, 20, 26, 49, 130, DateTimeKind.Utc).AddTicks(4046),
                            LastModifiedBy = "System",
                            Name = "users.view"
                        },
                        new
                        {
                            Id = new Guid("a5c08ec3-eeef-4910-8b15-3f9529c39a70"),
                            CreatedAt = new DateTime(2025, 4, 21, 20, 26, 49, 130, DateTimeKind.Utc).AddTicks(4048),
                            CreatedBy = "System",
                            Description = "Crear usuarios",
                            IsActive = true,
                            LastModifiedAt = new DateTime(2025, 4, 21, 20, 26, 49, 130, DateTimeKind.Utc).AddTicks(4049),
                            LastModifiedBy = "System",
                            Name = "users.create"
                        },
                        new
                        {
                            Id = new Guid("ffdaccc5-f1ed-446e-8166-878ee297d743"),
                            CreatedAt = new DateTime(2025, 4, 21, 20, 26, 49, 130, DateTimeKind.Utc).AddTicks(4050),
                            CreatedBy = "System",
                            Description = "Editar usuarios",
                            IsActive = true,
                            LastModifiedAt = new DateTime(2025, 4, 21, 20, 26, 49, 130, DateTimeKind.Utc).AddTicks(4050),
                            LastModifiedBy = "System",
                            Name = "users.edit"
                        },
                        new
                        {
                            Id = new Guid("034726f0-f521-40ae-8208-a15628794e7d"),
                            CreatedAt = new DateTime(2025, 4, 21, 20, 26, 49, 130, DateTimeKind.Utc).AddTicks(4052),
                            CreatedBy = "System",
                            Description = "Eliminar usuarios",
                            IsActive = true,
                            LastModifiedAt = new DateTime(2025, 4, 21, 20, 26, 49, 130, DateTimeKind.Utc).AddTicks(4052),
                            LastModifiedBy = "System",
                            Name = "users.delete"
                        });
                });

            modelBuilder.Entity("AuthSystem.Domain.Entities.Role", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<DateTime?>("LastModifiedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("LastModifiedBy")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("Id");

                    b.HasIndex("Name")
                        .IsUnique();

                    b.ToTable("Roles", (string)null);

                    b.HasData(
                        new
                        {
                            Id = new Guid("d7e350e8-5fb7-4517-b8da-6f602d66a3a9"),
                            CreatedAt = new DateTime(2025, 4, 21, 20, 26, 49, 130, DateTimeKind.Utc).AddTicks(3877),
                            CreatedBy = "System",
                            Description = "Administrador del sistema",
                            IsActive = true,
                            LastModifiedAt = new DateTime(2025, 4, 21, 20, 26, 49, 130, DateTimeKind.Utc).AddTicks(3879),
                            LastModifiedBy = "System",
                            Name = "Admin"
                        },
                        new
                        {
                            Id = new Guid("e1a8268c-d086-4098-aaf4-e326b3cd1dee"),
                            CreatedAt = new DateTime(2025, 4, 21, 20, 26, 49, 130, DateTimeKind.Utc).AddTicks(3886),
                            CreatedBy = "System",
                            Description = "Usuario estándar",
                            IsActive = true,
                            LastModifiedAt = new DateTime(2025, 4, 21, 20, 26, 49, 130, DateTimeKind.Utc).AddTicks(3886),
                            LastModifiedBy = "System",
                            Name = "User"
                        });
                });

            modelBuilder.Entity("AuthSystem.Domain.Entities.RolePermission", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<DateTime?>("LastModifiedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("LastModifiedBy")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<Guid>("PermissionId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("RoleId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("PermissionId");

                    b.HasIndex("RoleId", "PermissionId")
                        .IsUnique();

                    b.ToTable("RolePermissions", (string)null);

                    b.HasData(
                        new
                        {
                            Id = new Guid("bcaddc1f-c5da-48d0-8408-eccc202b9295"),
                            CreatedAt = new DateTime(2025, 4, 21, 20, 26, 49, 130, DateTimeKind.Utc).AddTicks(4077),
                            CreatedBy = "System",
                            IsActive = true,
                            LastModifiedAt = new DateTime(2025, 4, 21, 20, 26, 49, 130, DateTimeKind.Utc).AddTicks(4078),
                            LastModifiedBy = "System",
                            PermissionId = new Guid("607d2005-63f7-4cfc-b9ab-b16077bf041c"),
                            RoleId = new Guid("d7e350e8-5fb7-4517-b8da-6f602d66a3a9")
                        },
                        new
                        {
                            Id = new Guid("f3714d9b-9721-447c-a6e7-33de247c806f"),
                            CreatedAt = new DateTime(2025, 4, 21, 20, 26, 49, 130, DateTimeKind.Utc).AddTicks(4079),
                            CreatedBy = "System",
                            IsActive = true,
                            LastModifiedAt = new DateTime(2025, 4, 21, 20, 26, 49, 130, DateTimeKind.Utc).AddTicks(4080),
                            LastModifiedBy = "System",
                            PermissionId = new Guid("a5c08ec3-eeef-4910-8b15-3f9529c39a70"),
                            RoleId = new Guid("d7e350e8-5fb7-4517-b8da-6f602d66a3a9")
                        },
                        new
                        {
                            Id = new Guid("51aa030a-2ce2-400d-b6a5-d9d6cbb419d3"),
                            CreatedAt = new DateTime(2025, 4, 21, 20, 26, 49, 130, DateTimeKind.Utc).AddTicks(4081),
                            CreatedBy = "System",
                            IsActive = true,
                            LastModifiedAt = new DateTime(2025, 4, 21, 20, 26, 49, 130, DateTimeKind.Utc).AddTicks(4082),
                            LastModifiedBy = "System",
                            PermissionId = new Guid("ffdaccc5-f1ed-446e-8166-878ee297d743"),
                            RoleId = new Guid("d7e350e8-5fb7-4517-b8da-6f602d66a3a9")
                        },
                        new
                        {
                            Id = new Guid("6cf33b76-46cd-4420-9c51-f0ffac6486a4"),
                            CreatedAt = new DateTime(2025, 4, 21, 20, 26, 49, 130, DateTimeKind.Utc).AddTicks(4083),
                            CreatedBy = "System",
                            IsActive = true,
                            LastModifiedAt = new DateTime(2025, 4, 21, 20, 26, 49, 130, DateTimeKind.Utc).AddTicks(4084),
                            LastModifiedBy = "System",
                            PermissionId = new Guid("034726f0-f521-40ae-8208-a15628794e7d"),
                            RoleId = new Guid("d7e350e8-5fb7-4517-b8da-6f602d66a3a9")
                        },
                        new
                        {
                            Id = new Guid("d723e258-3efb-4a82-958a-524c44f98ea2"),
                            CreatedAt = new DateTime(2025, 4, 21, 20, 26, 49, 130, DateTimeKind.Utc).AddTicks(4085),
                            CreatedBy = "System",
                            IsActive = true,
                            LastModifiedAt = new DateTime(2025, 4, 21, 20, 26, 49, 130, DateTimeKind.Utc).AddTicks(4086),
                            LastModifiedBy = "System",
                            PermissionId = new Guid("607d2005-63f7-4cfc-b9ab-b16077bf041c"),
                            RoleId = new Guid("e1a8268c-d086-4098-aaf4-e326b3cd1dee")
                        });
                });

            modelBuilder.Entity("AuthSystem.Domain.Entities.User", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("ConcurrencyStamp")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("FullName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<DateTime?>("LastModifiedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("LastModifiedBy")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<DateTime?>("LastPasswordChangeAt")
                        .HasColumnType("datetime2");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("PasswordHash")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("PasswordResetToken")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<DateTime?>("PasswordResetTokenExpiry")
                        .HasColumnType("datetime2");

                    b.Property<string>("PhoneNumber")
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("SecurityStamp")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("TwoFactorRecoveryCode")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("TwoFactorSecretKey")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<int>("UserType")
                        .HasColumnType("int");

                    b.Property<string>("Username")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("Id");

                    b.HasIndex("Email")
                        .IsUnique();

                    b.HasIndex("Username")
                        .IsUnique();

                    b.ToTable("Users", (string)null);

                    b.HasData(
                        new
                        {
                            Id = new Guid("bcab4262-01ff-410f-9948-179b1cf9154b"),
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "2f24947e-db09-4b53-a116-03d93f03044f",
                            CreatedAt = new DateTime(2025, 4, 21, 20, 26, 49, 238, DateTimeKind.Utc).AddTicks(3169),
                            CreatedBy = "System",
                            Email = "admin@example.com",
                            EmailConfirmed = true,
                            FullName = "Administrator",
                            IsActive = true,
                            LastModifiedAt = new DateTime(2025, 4, 21, 20, 26, 49, 238, DateTimeKind.Utc).AddTicks(3182),
                            LastModifiedBy = "System",
                            LockoutEnabled = true,
                            PasswordHash = "$2a$11$Hw4nzSysTUJHwhtGCo2CqeItVFtM0xCFUhZ5UUMdWtW7EABImD5A2",
                            PhoneNumberConfirmed = true,
                            SecurityStamp = "667c1a71-e35f-494a-8782-d69cee647e58",
                            TwoFactorEnabled = false,
                            UserType = 1,
                            Username = "admin"
                        });
                });

            modelBuilder.Entity("AuthSystem.Domain.Entities.UserRole", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<DateTime?>("LastModifiedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("LastModifiedBy")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<Guid>("RoleId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.HasIndex("UserId", "RoleId")
                        .IsUnique();

                    b.ToTable("UserRoles", (string)null);

                    b.HasData(
                        new
                        {
                            Id = new Guid("b071fca7-4389-4cc7-bed5-b8c695a1f4b6"),
                            CreatedAt = new DateTime(2025, 4, 21, 20, 26, 49, 238, DateTimeKind.Utc).AddTicks(3769),
                            CreatedBy = "System",
                            IsActive = true,
                            LastModifiedAt = new DateTime(2025, 4, 21, 20, 26, 49, 238, DateTimeKind.Utc).AddTicks(3770),
                            LastModifiedBy = "System",
                            RoleId = new Guid("d7e350e8-5fb7-4517-b8da-6f602d66a3a9"),
                            UserId = new Guid("bcab4262-01ff-410f-9948-179b1cf9154b")
                        });
                });

            modelBuilder.Entity("AuthSystem.Domain.Entities.UserSession", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("DeviceInfo")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<DateTime>("ExpiresAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("IpAddress")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<DateTime>("LastActivity")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("LastModifiedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("LastModifiedBy")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("RefreshToken")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("RefreshToken")
                        .IsUnique();

                    b.HasIndex("UserId");

                    b.ToTable("UserSessions", (string)null);
                });

            modelBuilder.Entity("AuthSystem.Domain.Entities.Module", b =>
                {
                    b.HasOne("AuthSystem.Domain.Entities.Module", "Parent")
                        .WithMany("Children")
                        .HasForeignKey("ParentId");

                    b.Navigation("Parent");
                });

            modelBuilder.Entity("AuthSystem.Domain.Entities.RolePermission", b =>
                {
                    b.HasOne("AuthSystem.Domain.Entities.Permission", "Permission")
                        .WithMany("RolePermissions")
                        .HasForeignKey("PermissionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("AuthSystem.Domain.Entities.Role", "Role")
                        .WithMany("RolePermissions")
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Permission");

                    b.Navigation("Role");
                });

            modelBuilder.Entity("AuthSystem.Domain.Entities.UserRole", b =>
                {
                    b.HasOne("AuthSystem.Domain.Entities.Role", "Role")
                        .WithMany("UserRoles")
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("AuthSystem.Domain.Entities.User", "User")
                        .WithMany("UserRoles")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Role");

                    b.Navigation("User");
                });

            modelBuilder.Entity("AuthSystem.Domain.Entities.UserSession", b =>
                {
                    b.HasOne("AuthSystem.Domain.Entities.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("AuthSystem.Domain.Entities.Module", b =>
                {
                    b.Navigation("Children");
                });

            modelBuilder.Entity("AuthSystem.Domain.Entities.Permission", b =>
                {
                    b.Navigation("RolePermissions");
                });

            modelBuilder.Entity("AuthSystem.Domain.Entities.Role", b =>
                {
                    b.Navigation("RolePermissions");

                    b.Navigation("UserRoles");
                });

            modelBuilder.Entity("AuthSystem.Domain.Entities.User", b =>
                {
                    b.Navigation("UserRoles");
                });
#pragma warning restore 612, 618
        }
    }
}
