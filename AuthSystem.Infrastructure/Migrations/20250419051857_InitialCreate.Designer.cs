// <auto-generated />
using System;
using AuthSystem.Infrastructure.Persistence;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace AuthSystem.Infrastructure.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    [Migration("20250419051857_InitialCreate")]
    partial class InitialCreate
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.0")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("AuthSystem.Domain.Entities.Permission", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<DateTime?>("LastModifiedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("LastModifiedBy")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("Id");

                    b.HasIndex("Name")
                        .IsUnique();

                    b.ToTable("Permissions", (string)null);

                    b.HasData(
                        new
                        {
                            Id = new Guid("39dbc70f-5115-4999-b26b-4476115fe09e"),
                            CreatedAt = new DateTime(2025, 4, 19, 5, 18, 56, 895, DateTimeKind.Utc).AddTicks(163),
                            CreatedBy = "System",
                            Description = "Ver usuarios",
                            IsActive = true,
                            LastModifiedAt = new DateTime(2025, 4, 19, 5, 18, 56, 895, DateTimeKind.Utc).AddTicks(164),
                            LastModifiedBy = "System",
                            Name = "users.view"
                        },
                        new
                        {
                            Id = new Guid("72138c65-e260-419d-b83d-9bf2476a32b8"),
                            CreatedAt = new DateTime(2025, 4, 19, 5, 18, 56, 895, DateTimeKind.Utc).AddTicks(165),
                            CreatedBy = "System",
                            Description = "Crear usuarios",
                            IsActive = true,
                            LastModifiedAt = new DateTime(2025, 4, 19, 5, 18, 56, 895, DateTimeKind.Utc).AddTicks(166),
                            LastModifiedBy = "System",
                            Name = "users.create"
                        },
                        new
                        {
                            Id = new Guid("86155368-e34b-484a-b717-72ef484b6087"),
                            CreatedAt = new DateTime(2025, 4, 19, 5, 18, 56, 895, DateTimeKind.Utc).AddTicks(201),
                            CreatedBy = "System",
                            Description = "Editar usuarios",
                            IsActive = true,
                            LastModifiedAt = new DateTime(2025, 4, 19, 5, 18, 56, 895, DateTimeKind.Utc).AddTicks(202),
                            LastModifiedBy = "System",
                            Name = "users.edit"
                        },
                        new
                        {
                            Id = new Guid("c59219dd-ecab-40ce-8565-36377c641575"),
                            CreatedAt = new DateTime(2025, 4, 19, 5, 18, 56, 895, DateTimeKind.Utc).AddTicks(203),
                            CreatedBy = "System",
                            Description = "Eliminar usuarios",
                            IsActive = true,
                            LastModifiedAt = new DateTime(2025, 4, 19, 5, 18, 56, 895, DateTimeKind.Utc).AddTicks(204),
                            LastModifiedBy = "System",
                            Name = "users.delete"
                        });
                });

            modelBuilder.Entity("AuthSystem.Domain.Entities.Role", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<DateTime?>("LastModifiedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("LastModifiedBy")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("Id");

                    b.HasIndex("Name")
                        .IsUnique();

                    b.ToTable("Roles", (string)null);

                    b.HasData(
                        new
                        {
                            Id = new Guid("0b565c8b-393c-4365-9817-c59b2c8d869d"),
                            CreatedAt = new DateTime(2025, 4, 19, 5, 18, 56, 895, DateTimeKind.Utc).AddTicks(13),
                            CreatedBy = "System",
                            Description = "Administrador del sistema",
                            IsActive = true,
                            LastModifiedAt = new DateTime(2025, 4, 19, 5, 18, 56, 895, DateTimeKind.Utc).AddTicks(16),
                            LastModifiedBy = "System",
                            Name = "Admin"
                        },
                        new
                        {
                            Id = new Guid("376587dc-283d-492c-a80b-49cf8c6cb11a"),
                            CreatedAt = new DateTime(2025, 4, 19, 5, 18, 56, 895, DateTimeKind.Utc).AddTicks(23),
                            CreatedBy = "System",
                            Description = "Usuario estándar",
                            IsActive = true,
                            LastModifiedAt = new DateTime(2025, 4, 19, 5, 18, 56, 895, DateTimeKind.Utc).AddTicks(23),
                            LastModifiedBy = "System",
                            Name = "User"
                        });
                });

            modelBuilder.Entity("AuthSystem.Domain.Entities.RolePermission", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<DateTime?>("LastModifiedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("LastModifiedBy")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<Guid>("PermissionId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("RoleId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("PermissionId");

                    b.HasIndex("RoleId", "PermissionId")
                        .IsUnique();

                    b.ToTable("RolePermissions", (string)null);

                    b.HasData(
                        new
                        {
                            Id = new Guid("8ba1f416-11ef-4ad5-9db6-82c068f6b2e0"),
                            CreatedAt = new DateTime(2025, 4, 19, 5, 18, 56, 895, DateTimeKind.Utc).AddTicks(233),
                            CreatedBy = "System",
                            IsActive = true,
                            LastModifiedAt = new DateTime(2025, 4, 19, 5, 18, 56, 895, DateTimeKind.Utc).AddTicks(234),
                            LastModifiedBy = "System",
                            PermissionId = new Guid("39dbc70f-5115-4999-b26b-4476115fe09e"),
                            RoleId = new Guid("0b565c8b-393c-4365-9817-c59b2c8d869d")
                        },
                        new
                        {
                            Id = new Guid("7b396271-d5eb-428d-827d-f840488a1301"),
                            CreatedAt = new DateTime(2025, 4, 19, 5, 18, 56, 895, DateTimeKind.Utc).AddTicks(235),
                            CreatedBy = "System",
                            IsActive = true,
                            LastModifiedAt = new DateTime(2025, 4, 19, 5, 18, 56, 895, DateTimeKind.Utc).AddTicks(236),
                            LastModifiedBy = "System",
                            PermissionId = new Guid("72138c65-e260-419d-b83d-9bf2476a32b8"),
                            RoleId = new Guid("0b565c8b-393c-4365-9817-c59b2c8d869d")
                        },
                        new
                        {
                            Id = new Guid("eeac088f-34f9-499a-b5f7-114b72e22eb5"),
                            CreatedAt = new DateTime(2025, 4, 19, 5, 18, 56, 895, DateTimeKind.Utc).AddTicks(239),
                            CreatedBy = "System",
                            IsActive = true,
                            LastModifiedAt = new DateTime(2025, 4, 19, 5, 18, 56, 895, DateTimeKind.Utc).AddTicks(240),
                            LastModifiedBy = "System",
                            PermissionId = new Guid("86155368-e34b-484a-b717-72ef484b6087"),
                            RoleId = new Guid("0b565c8b-393c-4365-9817-c59b2c8d869d")
                        },
                        new
                        {
                            Id = new Guid("cfd610f0-e324-4a69-b726-e5c84560e4e0"),
                            CreatedAt = new DateTime(2025, 4, 19, 5, 18, 56, 895, DateTimeKind.Utc).AddTicks(241),
                            CreatedBy = "System",
                            IsActive = true,
                            LastModifiedAt = new DateTime(2025, 4, 19, 5, 18, 56, 895, DateTimeKind.Utc).AddTicks(242),
                            LastModifiedBy = "System",
                            PermissionId = new Guid("c59219dd-ecab-40ce-8565-36377c641575"),
                            RoleId = new Guid("0b565c8b-393c-4365-9817-c59b2c8d869d")
                        },
                        new
                        {
                            Id = new Guid("7220c88a-1ee4-45fe-91b1-34c73a2c57ad"),
                            CreatedAt = new DateTime(2025, 4, 19, 5, 18, 56, 895, DateTimeKind.Utc).AddTicks(243),
                            CreatedBy = "System",
                            IsActive = true,
                            LastModifiedAt = new DateTime(2025, 4, 19, 5, 18, 56, 895, DateTimeKind.Utc).AddTicks(244),
                            LastModifiedBy = "System",
                            PermissionId = new Guid("39dbc70f-5115-4999-b26b-4476115fe09e"),
                            RoleId = new Guid("376587dc-283d-492c-a80b-49cf8c6cb11a")
                        });
                });

            modelBuilder.Entity("AuthSystem.Domain.Entities.User", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("ConcurrencyStamp")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("FullName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<DateTime?>("LastModifiedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("LastModifiedBy")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<DateTime?>("LastPasswordChangeAt")
                        .HasColumnType("datetime2");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("PasswordHash")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("PasswordResetToken")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<DateTime?>("PasswordResetTokenExpiry")
                        .HasColumnType("datetime2");

                    b.Property<string>("PhoneNumber")
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("SecurityStamp")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("TwoFactorRecoveryCode")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("TwoFactorSecretKey")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<int>("UserType")
                        .HasColumnType("int");

                    b.Property<string>("Username")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("Id");

                    b.HasIndex("Email")
                        .IsUnique();

                    b.HasIndex("Username")
                        .IsUnique();

                    b.ToTable("Users", (string)null);

                    b.HasData(
                        new
                        {
                            Id = new Guid("f63828d9-87a8-434f-b460-291a63b2732f"),
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "7a384959-39de-4486-b7fe-78e743541f9b",
                            CreatedAt = new DateTime(2025, 4, 19, 5, 18, 56, 999, DateTimeKind.Utc).AddTicks(9306),
                            CreatedBy = "System",
                            Email = "admin@example.com",
                            EmailConfirmed = true,
                            FullName = "Administrator",
                            IsActive = true,
                            LastModifiedAt = new DateTime(2025, 4, 19, 5, 18, 56, 999, DateTimeKind.Utc).AddTicks(9315),
                            LastModifiedBy = "System",
                            LockoutEnabled = true,
                            PasswordHash = "$2a$11$wzI009jBP3C/YSxPS9jwQuFBy/bvGy52t.jg/dN8kf3nbThDIARbS",
                            PhoneNumberConfirmed = true,
                            SecurityStamp = "ed279eb9-0705-4055-bb1a-056b4cc77515",
                            TwoFactorEnabled = false,
                            UserType = 1,
                            Username = "admin"
                        });
                });

            modelBuilder.Entity("AuthSystem.Domain.Entities.UserRole", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<DateTime?>("LastModifiedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("LastModifiedBy")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<Guid>("RoleId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.HasIndex("UserId", "RoleId")
                        .IsUnique();

                    b.ToTable("UserRoles", (string)null);

                    b.HasData(
                        new
                        {
                            Id = new Guid("2e94db85-9918-4b3f-a09b-cb886f8c2867"),
                            CreatedAt = new DateTime(2025, 4, 19, 5, 18, 57, 0, DateTimeKind.Utc).AddTicks(272),
                            CreatedBy = "System",
                            IsActive = true,
                            LastModifiedAt = new DateTime(2025, 4, 19, 5, 18, 57, 0, DateTimeKind.Utc).AddTicks(273),
                            LastModifiedBy = "System",
                            RoleId = new Guid("0b565c8b-393c-4365-9817-c59b2c8d869d"),
                            UserId = new Guid("f63828d9-87a8-434f-b460-291a63b2732f")
                        });
                });

            modelBuilder.Entity("AuthSystem.Domain.Entities.UserSession", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("DeviceInfo")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<DateTime>("ExpiresAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("IpAddress")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<DateTime>("LastActivity")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("LastModifiedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("LastModifiedBy")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("RefreshToken")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("RefreshToken")
                        .IsUnique();

                    b.HasIndex("UserId");

                    b.ToTable("UserSessions", (string)null);
                });

            modelBuilder.Entity("AuthSystem.Domain.Entities.RolePermission", b =>
                {
                    b.HasOne("AuthSystem.Domain.Entities.Permission", "Permission")
                        .WithMany("RolePermissions")
                        .HasForeignKey("PermissionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("AuthSystem.Domain.Entities.Role", "Role")
                        .WithMany("RolePermissions")
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Permission");

                    b.Navigation("Role");
                });

            modelBuilder.Entity("AuthSystem.Domain.Entities.UserRole", b =>
                {
                    b.HasOne("AuthSystem.Domain.Entities.Role", "Role")
                        .WithMany("UserRoles")
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("AuthSystem.Domain.Entities.User", "User")
                        .WithMany("UserRoles")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Role");

                    b.Navigation("User");
                });

            modelBuilder.Entity("AuthSystem.Domain.Entities.UserSession", b =>
                {
                    b.HasOne("AuthSystem.Domain.Entities.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("AuthSystem.Domain.Entities.Permission", b =>
                {
                    b.Navigation("RolePermissions");
                });

            modelBuilder.Entity("AuthSystem.Domain.Entities.Role", b =>
                {
                    b.Navigation("RolePermissions");

                    b.Navigation("UserRoles");
                });

            modelBuilder.Entity("AuthSystem.Domain.Entities.User", b =>
                {
                    b.Navigation("UserRoles");
                });
#pragma warning restore 612, 618
        }
    }
}
