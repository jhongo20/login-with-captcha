// <auto-generated />
using System;
using AuthSystem.Infrastructure.Persistence;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace AuthSystem.Infrastructure.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    [Migration("20250421204426_SeedModulesData")]
    partial class SeedModulesData
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.0")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("AuthSystem.Domain.Entities.Module", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<int>("DisplayOrder")
                        .HasColumnType("int");

                    b.Property<string>("Icon")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<bool>("IsEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTime?>("LastModifiedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("LastModifiedBy")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<Guid?>("ModuleId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<Guid?>("ParentId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Route")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("UpdatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("ModuleId");

                    b.HasIndex("Name")
                        .IsUnique();

                    b.HasIndex("ParentId");

                    b.ToTable("Modules", (string)null);

                    b.HasData(
                        new
                        {
                            Id = new Guid("70d4253b-8b9f-4c90-871b-98c4073050fd"),
                            CreatedAt = new DateTime(2025, 4, 21, 20, 44, 25, 957, DateTimeKind.Utc).AddTicks(7108),
                            CreatedBy = "System",
                            Description = "Panel principal del sistema",
                            DisplayOrder = 1,
                            Icon = "fa-tachometer-alt",
                            IsActive = true,
                            IsEnabled = true,
                            LastModifiedAt = new DateTime(2025, 4, 21, 20, 44, 25, 957, DateTimeKind.Utc).AddTicks(7108),
                            LastModifiedBy = "System",
                            Name = "Dashboard",
                            Route = "/dashboard"
                        },
                        new
                        {
                            Id = new Guid("da9d9c11-b242-4c9b-8611-8eb008765bec"),
                            CreatedAt = new DateTime(2025, 4, 21, 20, 44, 25, 957, DateTimeKind.Utc).AddTicks(7143),
                            CreatedBy = "System",
                            Description = "Módulo de administración del sistema",
                            DisplayOrder = 2,
                            Icon = "fa-cogs",
                            IsActive = true,
                            IsEnabled = true,
                            LastModifiedAt = new DateTime(2025, 4, 21, 20, 44, 25, 957, DateTimeKind.Utc).AddTicks(7143),
                            LastModifiedBy = "System",
                            Name = "Administración",
                            Route = "/admin"
                        },
                        new
                        {
                            Id = new Guid("69a19da5-b2c6-4a75-91ca-843f00caa2e9"),
                            CreatedAt = new DateTime(2025, 4, 21, 20, 44, 25, 957, DateTimeKind.Utc).AddTicks(7185),
                            CreatedBy = "System",
                            Description = "Gestión de usuarios del sistema",
                            DisplayOrder = 1,
                            Icon = "fa-users",
                            IsActive = true,
                            IsEnabled = true,
                            LastModifiedAt = new DateTime(2025, 4, 21, 20, 44, 25, 957, DateTimeKind.Utc).AddTicks(7186),
                            LastModifiedBy = "System",
                            Name = "Usuarios",
                            ParentId = new Guid("da9d9c11-b242-4c9b-8611-8eb008765bec"),
                            Route = "/admin/users"
                        },
                        new
                        {
                            Id = new Guid("876d50d8-c17a-41b9-8317-0de67c6ceba9"),
                            CreatedAt = new DateTime(2025, 4, 21, 20, 44, 25, 957, DateTimeKind.Utc).AddTicks(7216),
                            CreatedBy = "System",
                            Description = "Gestión de roles y permisos",
                            DisplayOrder = 2,
                            Icon = "fa-user-shield",
                            IsActive = true,
                            IsEnabled = true,
                            LastModifiedAt = new DateTime(2025, 4, 21, 20, 44, 25, 957, DateTimeKind.Utc).AddTicks(7216),
                            LastModifiedBy = "System",
                            Name = "Roles",
                            ParentId = new Guid("da9d9c11-b242-4c9b-8611-8eb008765bec"),
                            Route = "/admin/roles"
                        },
                        new
                        {
                            Id = new Guid("090e0db3-8ee2-4729-9095-fc358fbee9bf"),
                            CreatedAt = new DateTime(2025, 4, 21, 20, 44, 25, 957, DateTimeKind.Utc).AddTicks(7269),
                            CreatedBy = "System",
                            Description = "Módulo de reportes y estadísticas",
                            DisplayOrder = 3,
                            Icon = "fa-chart-bar",
                            IsActive = true,
                            IsEnabled = true,
                            LastModifiedAt = new DateTime(2025, 4, 21, 20, 44, 25, 957, DateTimeKind.Utc).AddTicks(7270),
                            LastModifiedBy = "System",
                            Name = "Reportes",
                            Route = "/reports"
                        });
                });

            modelBuilder.Entity("AuthSystem.Domain.Entities.Permission", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<DateTime?>("LastModifiedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("LastModifiedBy")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("Id");

                    b.HasIndex("Name")
                        .IsUnique();

                    b.ToTable("Permissions", (string)null);

                    b.HasData(
                        new
                        {
                            Id = new Guid("2a1ccb43-fa4f-48ce-b148-32d3bd6dae19"),
                            CreatedAt = new DateTime(2025, 4, 21, 20, 44, 25, 819, DateTimeKind.Utc).AddTicks(8053),
                            CreatedBy = "System",
                            Description = "Ver usuarios",
                            IsActive = true,
                            LastModifiedAt = new DateTime(2025, 4, 21, 20, 44, 25, 819, DateTimeKind.Utc).AddTicks(8054),
                            LastModifiedBy = "System",
                            Name = "users.view"
                        },
                        new
                        {
                            Id = new Guid("5c3a4a58-2c25-4a9d-b641-a7a35f9d3c95"),
                            CreatedAt = new DateTime(2025, 4, 21, 20, 44, 25, 819, DateTimeKind.Utc).AddTicks(8055),
                            CreatedBy = "System",
                            Description = "Crear usuarios",
                            IsActive = true,
                            LastModifiedAt = new DateTime(2025, 4, 21, 20, 44, 25, 819, DateTimeKind.Utc).AddTicks(8056),
                            LastModifiedBy = "System",
                            Name = "users.create"
                        },
                        new
                        {
                            Id = new Guid("7b073c81-8bcd-4a93-96e3-8ef64b87960f"),
                            CreatedAt = new DateTime(2025, 4, 21, 20, 44, 25, 819, DateTimeKind.Utc).AddTicks(8099),
                            CreatedBy = "System",
                            Description = "Editar usuarios",
                            IsActive = true,
                            LastModifiedAt = new DateTime(2025, 4, 21, 20, 44, 25, 819, DateTimeKind.Utc).AddTicks(8100),
                            LastModifiedBy = "System",
                            Name = "users.edit"
                        },
                        new
                        {
                            Id = new Guid("a9bb2c4d-4c46-4eba-b27a-4b2127a0df5f"),
                            CreatedAt = new DateTime(2025, 4, 21, 20, 44, 25, 819, DateTimeKind.Utc).AddTicks(8101),
                            CreatedBy = "System",
                            Description = "Eliminar usuarios",
                            IsActive = true,
                            LastModifiedAt = new DateTime(2025, 4, 21, 20, 44, 25, 819, DateTimeKind.Utc).AddTicks(8102),
                            LastModifiedBy = "System",
                            Name = "users.delete"
                        });
                });

            modelBuilder.Entity("AuthSystem.Domain.Entities.Role", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<DateTime?>("LastModifiedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("LastModifiedBy")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("Id");

                    b.HasIndex("Name")
                        .IsUnique();

                    b.ToTable("Roles", (string)null);

                    b.HasData(
                        new
                        {
                            Id = new Guid("d7e350e8-5fb7-4517-b8da-6f602d66a3a9"),
                            CreatedAt = new DateTime(2025, 4, 21, 20, 44, 25, 819, DateTimeKind.Utc).AddTicks(7835),
                            CreatedBy = "System",
                            Description = "Administrador del sistema",
                            IsActive = true,
                            LastModifiedAt = new DateTime(2025, 4, 21, 20, 44, 25, 819, DateTimeKind.Utc).AddTicks(7838),
                            LastModifiedBy = "System",
                            Name = "Admin"
                        },
                        new
                        {
                            Id = new Guid("f7d36113-51ea-4448-a9d2-d9151d5ac28b"),
                            CreatedAt = new DateTime(2025, 4, 21, 20, 44, 25, 819, DateTimeKind.Utc).AddTicks(7853),
                            CreatedBy = "System",
                            Description = "Usuario estándar",
                            IsActive = true,
                            LastModifiedAt = new DateTime(2025, 4, 21, 20, 44, 25, 819, DateTimeKind.Utc).AddTicks(7853),
                            LastModifiedBy = "System",
                            Name = "User"
                        });
                });

            modelBuilder.Entity("AuthSystem.Domain.Entities.RolePermission", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<DateTime?>("LastModifiedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("LastModifiedBy")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<Guid>("PermissionId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("RoleId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("PermissionId");

                    b.HasIndex("RoleId", "PermissionId")
                        .IsUnique();

                    b.ToTable("RolePermissions", (string)null);

                    b.HasData(
                        new
                        {
                            Id = new Guid("a3d9d72b-353d-4c3b-871c-c620c4d92247"),
                            CreatedAt = new DateTime(2025, 4, 21, 20, 44, 25, 957, DateTimeKind.Utc).AddTicks(6799),
                            CreatedBy = "System",
                            IsActive = true,
                            LastModifiedAt = new DateTime(2025, 4, 21, 20, 44, 25, 957, DateTimeKind.Utc).AddTicks(6800),
                            LastModifiedBy = "System",
                            PermissionId = new Guid("2a1ccb43-fa4f-48ce-b148-32d3bd6dae19"),
                            RoleId = new Guid("d7e350e8-5fb7-4517-b8da-6f602d66a3a9")
                        },
                        new
                        {
                            Id = new Guid("e9ab943c-80fb-4335-ae12-102b8a669a40"),
                            CreatedAt = new DateTime(2025, 4, 21, 20, 44, 25, 957, DateTimeKind.Utc).AddTicks(6803),
                            CreatedBy = "System",
                            IsActive = true,
                            LastModifiedAt = new DateTime(2025, 4, 21, 20, 44, 25, 957, DateTimeKind.Utc).AddTicks(6804),
                            LastModifiedBy = "System",
                            PermissionId = new Guid("5c3a4a58-2c25-4a9d-b641-a7a35f9d3c95"),
                            RoleId = new Guid("d7e350e8-5fb7-4517-b8da-6f602d66a3a9")
                        },
                        new
                        {
                            Id = new Guid("91bc8cbb-8378-49b1-808a-c9ccc75a02b8"),
                            CreatedAt = new DateTime(2025, 4, 21, 20, 44, 25, 957, DateTimeKind.Utc).AddTicks(6813),
                            CreatedBy = "System",
                            IsActive = true,
                            LastModifiedAt = new DateTime(2025, 4, 21, 20, 44, 25, 957, DateTimeKind.Utc).AddTicks(6814),
                            LastModifiedBy = "System",
                            PermissionId = new Guid("7b073c81-8bcd-4a93-96e3-8ef64b87960f"),
                            RoleId = new Guid("d7e350e8-5fb7-4517-b8da-6f602d66a3a9")
                        },
                        new
                        {
                            Id = new Guid("f7f06804-7088-4e7b-ad1a-f6b7251df0f2"),
                            CreatedAt = new DateTime(2025, 4, 21, 20, 44, 25, 957, DateTimeKind.Utc).AddTicks(6819),
                            CreatedBy = "System",
                            IsActive = true,
                            LastModifiedAt = new DateTime(2025, 4, 21, 20, 44, 25, 957, DateTimeKind.Utc).AddTicks(6819),
                            LastModifiedBy = "System",
                            PermissionId = new Guid("a9bb2c4d-4c46-4eba-b27a-4b2127a0df5f"),
                            RoleId = new Guid("d7e350e8-5fb7-4517-b8da-6f602d66a3a9")
                        },
                        new
                        {
                            Id = new Guid("4ff9de14-94a3-4726-9181-aff62299d437"),
                            CreatedAt = new DateTime(2025, 4, 21, 20, 44, 25, 957, DateTimeKind.Utc).AddTicks(6898),
                            CreatedBy = "System",
                            IsActive = true,
                            LastModifiedAt = new DateTime(2025, 4, 21, 20, 44, 25, 957, DateTimeKind.Utc).AddTicks(6899),
                            LastModifiedBy = "System",
                            PermissionId = new Guid("2a1ccb43-fa4f-48ce-b148-32d3bd6dae19"),
                            RoleId = new Guid("f7d36113-51ea-4448-a9d2-d9151d5ac28b")
                        });
                });

            modelBuilder.Entity("AuthSystem.Domain.Entities.User", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("ConcurrencyStamp")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("FullName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<DateTime?>("LastModifiedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("LastModifiedBy")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<DateTime?>("LastPasswordChangeAt")
                        .HasColumnType("datetime2");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("PasswordHash")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("PasswordResetToken")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<DateTime?>("PasswordResetTokenExpiry")
                        .HasColumnType("datetime2");

                    b.Property<string>("PhoneNumber")
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("SecurityStamp")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("TwoFactorRecoveryCode")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("TwoFactorSecretKey")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<int>("UserType")
                        .HasColumnType("int");

                    b.Property<string>("Username")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("Id");

                    b.HasIndex("Email")
                        .IsUnique();

                    b.HasIndex("Username")
                        .IsUnique();

                    b.ToTable("Users", (string)null);

                    b.HasData(
                        new
                        {
                            Id = new Guid("bcab4262-01ff-410f-9948-179b1cf9154b"),
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "6e0e824a-9dc9-434d-bf76-9fd59f24ebd5",
                            CreatedAt = new DateTime(2025, 4, 21, 20, 44, 25, 957, DateTimeKind.Utc).AddTicks(5781),
                            CreatedBy = "System",
                            Email = "admin@example.com",
                            EmailConfirmed = true,
                            FullName = "Administrator",
                            IsActive = true,
                            LastModifiedAt = new DateTime(2025, 4, 21, 20, 44, 25, 957, DateTimeKind.Utc).AddTicks(5791),
                            LastModifiedBy = "System",
                            LockoutEnabled = true,
                            PasswordHash = "$2a$11$LWuztS0wDjyf/g8vMaCS2.rsrRmLKD94nprEnpZr3VJvYlcWiqsk2",
                            PhoneNumberConfirmed = true,
                            SecurityStamp = "39b570eb-fb1a-4a48-bf8c-44b73bd3c9ee",
                            TwoFactorEnabled = false,
                            UserType = 1,
                            Username = "admin"
                        });
                });

            modelBuilder.Entity("AuthSystem.Domain.Entities.UserRole", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<DateTime?>("LastModifiedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("LastModifiedBy")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<Guid>("RoleId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.HasIndex("UserId", "RoleId")
                        .IsUnique();

                    b.ToTable("UserRoles", (string)null);

                    b.HasData(
                        new
                        {
                            Id = new Guid("e2475aa1-4ac9-44b3-bcb1-c50f08594af4"),
                            CreatedAt = new DateTime(2025, 4, 21, 20, 44, 25, 957, DateTimeKind.Utc).AddTicks(6704),
                            CreatedBy = "System",
                            IsActive = true,
                            LastModifiedAt = new DateTime(2025, 4, 21, 20, 44, 25, 957, DateTimeKind.Utc).AddTicks(6707),
                            LastModifiedBy = "System",
                            RoleId = new Guid("d7e350e8-5fb7-4517-b8da-6f602d66a3a9"),
                            UserId = new Guid("bcab4262-01ff-410f-9948-179b1cf9154b")
                        });
                });

            modelBuilder.Entity("AuthSystem.Domain.Entities.UserSession", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("DeviceInfo")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<DateTime>("ExpiresAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("IpAddress")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<DateTime>("LastActivity")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("LastModifiedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("LastModifiedBy")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("RefreshToken")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("RefreshToken")
                        .IsUnique();

                    b.HasIndex("UserId");

                    b.ToTable("UserSessions", (string)null);
                });

            modelBuilder.Entity("AuthSystem.Domain.Entities.Module", b =>
                {
                    b.HasOne("AuthSystem.Domain.Entities.Module", null)
                        .WithMany("Children")
                        .HasForeignKey("ModuleId");

                    b.HasOne("AuthSystem.Domain.Entities.Module", "Parent")
                        .WithMany()
                        .HasForeignKey("ParentId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.Navigation("Parent");
                });

            modelBuilder.Entity("AuthSystem.Domain.Entities.RolePermission", b =>
                {
                    b.HasOne("AuthSystem.Domain.Entities.Permission", "Permission")
                        .WithMany("RolePermissions")
                        .HasForeignKey("PermissionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("AuthSystem.Domain.Entities.Role", "Role")
                        .WithMany("RolePermissions")
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Permission");

                    b.Navigation("Role");
                });

            modelBuilder.Entity("AuthSystem.Domain.Entities.UserRole", b =>
                {
                    b.HasOne("AuthSystem.Domain.Entities.Role", "Role")
                        .WithMany("UserRoles")
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("AuthSystem.Domain.Entities.User", "User")
                        .WithMany("UserRoles")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Role");

                    b.Navigation("User");
                });

            modelBuilder.Entity("AuthSystem.Domain.Entities.UserSession", b =>
                {
                    b.HasOne("AuthSystem.Domain.Entities.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("AuthSystem.Domain.Entities.Module", b =>
                {
                    b.Navigation("Children");
                });

            modelBuilder.Entity("AuthSystem.Domain.Entities.Permission", b =>
                {
                    b.Navigation("RolePermissions");
                });

            modelBuilder.Entity("AuthSystem.Domain.Entities.Role", b =>
                {
                    b.Navigation("RolePermissions");

                    b.Navigation("UserRoles");
                });

            modelBuilder.Entity("AuthSystem.Domain.Entities.User", b =>
                {
                    b.Navigation("UserRoles");
                });
#pragma warning restore 612, 618
        }
    }
}
