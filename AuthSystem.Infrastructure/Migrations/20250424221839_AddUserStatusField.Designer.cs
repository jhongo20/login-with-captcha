// <auto-generated />
using System;
using AuthSystem.Infrastructure.Persistence;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace AuthSystem.Infrastructure.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    [Migration("20250424221839_AddUserStatusField")]
    partial class AddUserStatusField
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.0")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("AuthSystem.Domain.Entities.ActivationCode", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Code")
                        .IsRequired()
                        .HasMaxLength(10)
                        .HasColumnType("nvarchar(10)");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("CreatedBy")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<DateTime>("ExpiresAt")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsUsed")
                        .HasColumnType("bit");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("UpdatedBy")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("ActivationCodes", (string)null);
                });

            modelBuilder.Entity("AuthSystem.Domain.Entities.EmailTemplate", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("CreatedBy")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("Description")
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<string>("HtmlContent")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("Subject")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<string>("TextContent")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("UpdatedBy")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.HasKey("Id");

                    b.ToTable("EmailTemplates", (string)null);

                    b.HasData(
                        new
                        {
                            Id = new Guid("8c7e0a8d-4b8d-4cd9-a6ed-7de69f4a5e8e"),
                            CreatedAt = new DateTime(2025, 4, 24, 22, 18, 24, 501, DateTimeKind.Utc).AddTicks(9817),
                            CreatedBy = "System",
                            Description = "Plantilla para el correo de bienvenida cuando se crea un usuario",
                            HtmlContent = "\n                        <html>\n                        <head>\n                            <style>\n                                body { font-family: Arial, sans-serif; line-height: 1.6; color: #333; }\n                                .container { width: 100%; max-width: 600px; margin: 0 auto; padding: 20px; }\n                                .header { background-color: #4a6da7; color: white; padding: 10px 20px; text-align: center; }\n                                .content { padding: 20px; background-color: #f9f9f9; }\n                                .footer { text-align: center; padding: 10px; font-size: 12px; color: #666; }\n                            </style>\n                        </head>\n                        <body>\n                            <div class='container'>\n                                <div class='header'>\n                                    <h1>¡Bienvenido a AuthSystem!</h1>\n                                </div>\n                                <div class='content'>\n                                    <p>Hola <strong>{{FullName}}</strong>,</p>\n                                    <p>Tu cuenta ha sido creada exitosamente en nuestro sistema.</p>\n                                    <p>Detalles de tu cuenta:</p>\n                                    <ul>\n                                        <li><strong>Usuario:</strong> {{Username}}</li>\n                                        <li><strong>Correo electrónico:</strong> {{Email}}</li>\n                                        <li><strong>Fecha de creación:</strong> {{CurrentDate}}</li>\n                                    </ul>\n                                    <p>Ya puedes iniciar sesión en nuestra plataforma y comenzar a utilizarla.</p>\n                                    <p>Si tienes alguna pregunta, no dudes en contactarnos.</p>\n                                    <p>Saludos cordiales,<br>El equipo de AuthSystem</p>\n                                </div>\n                                <div class='footer'>\n                                    <p>Este es un correo electrónico automático, por favor no respondas a este mensaje.</p>\n                                </div>\n                            </div>\n                        </body>\n                        </html>",
                            IsActive = true,
                            Name = "UserCreated",
                            Subject = "Bienvenido a AuthSystem",
                            TextContent = "\n                        ¡Bienvenido a AuthSystem!\n\n                        Hola {{FullName}},\n\n                        Tu cuenta ha sido creada exitosamente en nuestro sistema.\n\n                        Detalles de tu cuenta:\n                        - Usuario: {{Username}}\n                        - Correo electrónico: {{Email}}\n                        - Fecha de creación: {{CurrentDate}}\n\n                        Ya puedes iniciar sesión en nuestra plataforma y comenzar a utilizarla.\n\n                        Si tienes alguna pregunta, no dudes en contactarnos.\n\n                        Saludos cordiales,\n                        El equipo de AuthSystem\n\n                        Este es un correo electrónico automático, por favor no respondas a este mensaje."
                        },
                        new
                        {
                            Id = new Guid("9d8f0b9e-5c9e-5de0-b7fe-8ef7a5f6b9f9"),
                            CreatedAt = new DateTime(2025, 4, 24, 22, 18, 24, 501, DateTimeKind.Utc).AddTicks(9839),
                            CreatedBy = "System",
                            Description = "Plantilla para el correo de notificación cuando se actualiza un usuario",
                            HtmlContent = "\n                        <html>\n                        <head>\n                            <style>\n                                body { font-family: Arial, sans-serif; line-height: 1.6; color: #333; }\n                                .container { width: 100%; max-width: 600px; margin: 0 auto; padding: 20px; }\n                                .header { background-color: #4a6da7; color: white; padding: 10px 20px; text-align: center; }\n                                .content { padding: 20px; background-color: #f9f9f9; }\n                                .footer { text-align: center; padding: 10px; font-size: 12px; color: #666; }\n                            </style>\n                        </head>\n                        <body>\n                            <div class='container'>\n                                <div class='header'>\n                                    <h1>Actualización de Cuenta</h1>\n                                </div>\n                                <div class='content'>\n                                    <p>Hola <strong>{{FullName}}</strong>,</p>\n                                    <p>Tu cuenta ha sido actualizada en nuestro sistema.</p>\n                                    <p>Detalles de tu cuenta:</p>\n                                    <ul>\n                                        <li><strong>Usuario:</strong> {{Username}}</li>\n                                        <li><strong>Correo electrónico:</strong> {{Email}}</li>\n                                        <li><strong>Fecha de actualización:</strong> {{UpdateDate}}</li>\n                                    </ul>\n                                    <p>Si no has realizado esta actualización o tienes alguna pregunta, por favor contacta a nuestro equipo de soporte inmediatamente.</p>\n                                    <p>Saludos cordiales,<br>El equipo de AuthSystem</p>\n                                </div>\n                                <div class='footer'>\n                                    <p>Este es un correo electrónico automático, por favor no respondas a este mensaje.</p>\n                                </div>\n                            </div>\n                        </body>\n                        </html>",
                            IsActive = true,
                            Name = "UserUpdated",
                            Subject = "Tu cuenta ha sido actualizada",
                            TextContent = "\n                        Actualización de Cuenta\n\n                        Hola {{FullName}},\n\n                        Tu cuenta ha sido actualizada en nuestro sistema.\n\n                        Detalles de tu cuenta:\n                        - Usuario: {{Username}}\n                        - Correo electrónico: {{Email}}\n                        - Fecha de actualización: {{UpdateDate}}\n\n                        Si no has realizado esta actualización o tienes alguna pregunta, por favor contacta a nuestro equipo de soporte inmediatamente.\n\n                        Saludos cordiales,\n                        El equipo de AuthSystem\n\n                        Este es un correo electrónico automático, por favor no respondas a este mensaje."
                        },
                        new
                        {
                            Id = new Guid("7a6f0c7b-3a7c-4bc8-95ed-6de58f4a4e7d"),
                            CreatedAt = new DateTime(2025, 4, 24, 22, 18, 24, 501, DateTimeKind.Utc).AddTicks(9842),
                            CreatedBy = "System",
                            Description = "Plantilla para el correo con código de activación",
                            HtmlContent = "\n                        <html>\n                        <head>\n                            <style>\n                                body { font-family: Arial, sans-serif; line-height: 1.6; color: #333; }\n                                .container { width: 100%; max-width: 600px; margin: 0 auto; padding: 20px; }\n                                .header { background-color: #4a6da7; color: white; padding: 10px 20px; text-align: center; }\n                                .content { padding: 20px; background-color: #f9f9f9; }\n                                .code { font-size: 24px; font-weight: bold; text-align: center; padding: 15px; background-color: #e9e9e9; margin: 20px 0; letter-spacing: 5px; }\n                                .footer { text-align: center; padding: 10px; font-size: 12px; color: #666; }\n                            </style>\n                        </head>\n                        <body>\n                            <div class='container'>\n                                <div class='header'>\n                                    <h1>Código de Activación</h1>\n                                </div>\n                                <div class='content'>\n                                    <p>Hola <strong>{{FullName}}</strong>,</p>\n                                    <p>Has solicitado un código de activación para tu cuenta en AuthSystem.</p>\n                                    <p>Tu código de activación es:</p>\n                                    <div class='code'>{{ActivationCode}}</div>\n                                    <p>Este código es válido por {{ExpirationTime}} a partir de ahora.</p>\n                                    <p>Si no has solicitado este código, por favor ignora este mensaje o contacta a nuestro equipo de soporte.</p>\n                                    <p>Saludos cordiales,<br>El equipo de AuthSystem</p>\n                                </div>\n                                <div class='footer'>\n                                    <p>Este es un correo electrónico automático, por favor no respondas a este mensaje.</p>\n                                </div>\n                            </div>\n                        </body>\n                        </html>",
                            IsActive = true,
                            Name = "ActivationCode",
                            Subject = "Código de Activación - AuthSystem",
                            TextContent = "\n                        Código de Activación\n\n                        Hola {{FullName}},\n\n                        Has solicitado un código de activación para tu cuenta en AuthSystem.\n\n                        Tu código de activación es: {{ActivationCode}}\n\n                        Este código es válido por {{ExpirationTime}} a partir de ahora.\n\n                        Si no has solicitado este código, por favor ignora este mensaje o contacta a nuestro equipo de soporte.\n\n                        Saludos cordiales,\n                        El equipo de AuthSystem\n\n                        Este es un correo electrónico automático, por favor no respondas a este mensaje."
                        },
                        new
                        {
                            Id = new Guid("6b5e0d6a-2a6b-3ab7-84dc-5cf6b3e3a6c6"),
                            CreatedAt = new DateTime(2025, 4, 24, 22, 18, 24, 501, DateTimeKind.Utc).AddTicks(9846),
                            CreatedBy = "System",
                            Description = "Plantilla para el correo de restablecimiento de contraseña",
                            HtmlContent = "\n                        <html>\n                        <head>\n                            <style>\n                                body { font-family: Arial, sans-serif; line-height: 1.6; color: #333; }\n                                .container { width: 100%; max-width: 600px; margin: 0 auto; padding: 20px; }\n                                .header { background-color: #4a6da7; color: white; padding: 10px 20px; text-align: center; }\n                                .content { padding: 20px; background-color: #f9f9f9; }\n                                .button { display: inline-block; padding: 10px 20px; background-color: #4a6da7; color: white; text-decoration: none; border-radius: 5px; margin: 20px 0; }\n                                .footer { text-align: center; padding: 10px; font-size: 12px; color: #666; }\n                            </style>\n                        </head>\n                        <body>\n                            <div class='container'>\n                                <div class='header'>\n                                    <h1>Restablecimiento de Contraseña</h1>\n                                </div>\n                                <div class='content'>\n                                    <p>Hola <strong>{{FullName}}</strong>,</p>\n                                    <p>Has solicitado restablecer la contraseña de tu cuenta en AuthSystem.</p>\n                                    <p>Para restablecer tu contraseña, haz clic en el siguiente enlace:</p>\n                                    <p style='text-align: center;'><a href='{{ResetUrl}}' class='button'>Restablecer Contraseña</a></p>\n                                    <p>O copia y pega la siguiente URL en tu navegador:</p>\n                                    <p>{{ResetUrl}}</p>\n                                    <p>Este enlace es válido por {{ExpirationTime}} a partir de ahora.</p>\n                                    <p>Si no has solicitado restablecer tu contraseña, por favor ignora este mensaje o contacta a nuestro equipo de soporte.</p>\n                                    <p>Saludos cordiales,<br>El equipo de AuthSystem</p>\n                                </div>\n                                <div class='footer'>\n                                    <p>Este es un correo electrónico automático, por favor no respondas a este mensaje.</p>\n                                </div>\n                            </div>\n                        </body>\n                        </html>",
                            IsActive = true,
                            Name = "PasswordReset",
                            Subject = "Restablecimiento de Contraseña - AuthSystem",
                            TextContent = "\n                        Restablecimiento de Contraseña\n\n                        Hola {{FullName}},\n\n                        Has solicitado restablecer la contraseña de tu cuenta en AuthSystem.\n\n                        Para restablecer tu contraseña, visita el siguiente enlace:\n                        {{ResetUrl}}\n\n                        Este enlace es válido por {{ExpirationTime}} a partir de ahora.\n\n                        Si no has solicitado restablecer tu contraseña, por favor ignora este mensaje o contacta a nuestro equipo de soporte.\n\n                        Saludos cordiales,\n                        El equipo de AuthSystem\n\n                        Este es un correo electrónico automático, por favor no respondas a este mensaje."
                        });
                });

            modelBuilder.Entity("AuthSystem.Domain.Entities.Module", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("CreatedBy")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("Description")
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<int>("DisplayOrder")
                        .HasColumnType("int");

                    b.Property<string>("Icon")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<bool>("IsEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTime?>("LastModifiedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("LastModifiedBy")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<Guid?>("ParentId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Route")
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("UpdatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("Name")
                        .IsUnique();

                    b.HasIndex("ParentId");

                    b.ToTable("Modules", (string)null);

                    b.HasData(
                        new
                        {
                            Id = new Guid("f834a42c-6cd2-41cf-9783-0f7044807c15"),
                            CreatedAt = new DateTime(2025, 4, 24, 22, 18, 24, 501, DateTimeKind.Utc).AddTicks(9512),
                            CreatedBy = "System",
                            Description = "Panel principal del sistema",
                            DisplayOrder = 1,
                            Icon = "fa-tachometer-alt",
                            IsActive = true,
                            IsEnabled = true,
                            LastModifiedAt = new DateTime(2025, 4, 24, 22, 18, 24, 501, DateTimeKind.Utc).AddTicks(9513),
                            LastModifiedBy = "System",
                            Name = "Dashboard",
                            Route = "/dashboard"
                        },
                        new
                        {
                            Id = new Guid("557bdbf3-b609-417f-9e83-f35367dca56c"),
                            CreatedAt = new DateTime(2025, 4, 24, 22, 18, 24, 501, DateTimeKind.Utc).AddTicks(9644),
                            CreatedBy = "System",
                            Description = "Módulo de administración del sistema",
                            DisplayOrder = 2,
                            Icon = "fa-cogs",
                            IsActive = true,
                            IsEnabled = true,
                            LastModifiedAt = new DateTime(2025, 4, 24, 22, 18, 24, 501, DateTimeKind.Utc).AddTicks(9644),
                            LastModifiedBy = "System",
                            Name = "Administración",
                            Route = "/admin"
                        },
                        new
                        {
                            Id = new Guid("efb75e85-c2f7-4077-93c1-e52ff7d8f4d6"),
                            CreatedAt = new DateTime(2025, 4, 24, 22, 18, 24, 501, DateTimeKind.Utc).AddTicks(9684),
                            CreatedBy = "System",
                            Description = "Gestión de usuarios del sistema",
                            DisplayOrder = 1,
                            Icon = "fa-users",
                            IsActive = true,
                            IsEnabled = true,
                            LastModifiedAt = new DateTime(2025, 4, 24, 22, 18, 24, 501, DateTimeKind.Utc).AddTicks(9685),
                            LastModifiedBy = "System",
                            Name = "Usuarios",
                            ParentId = new Guid("557bdbf3-b609-417f-9e83-f35367dca56c"),
                            Route = "/admin/users"
                        },
                        new
                        {
                            Id = new Guid("e0334eb7-50a1-4df0-bd1e-ab4bb87199e7"),
                            CreatedAt = new DateTime(2025, 4, 24, 22, 18, 24, 501, DateTimeKind.Utc).AddTicks(9740),
                            CreatedBy = "System",
                            Description = "Gestión de roles y permisos",
                            DisplayOrder = 2,
                            Icon = "fa-user-shield",
                            IsActive = true,
                            IsEnabled = true,
                            LastModifiedAt = new DateTime(2025, 4, 24, 22, 18, 24, 501, DateTimeKind.Utc).AddTicks(9740),
                            LastModifiedBy = "System",
                            Name = "Roles",
                            ParentId = new Guid("557bdbf3-b609-417f-9e83-f35367dca56c"),
                            Route = "/admin/roles"
                        },
                        new
                        {
                            Id = new Guid("0de607e9-988c-4948-8397-3469897f289e"),
                            CreatedAt = new DateTime(2025, 4, 24, 22, 18, 24, 501, DateTimeKind.Utc).AddTicks(9765),
                            CreatedBy = "System",
                            Description = "Módulo de reportes y estadísticas",
                            DisplayOrder = 3,
                            Icon = "fa-chart-bar",
                            IsActive = true,
                            IsEnabled = true,
                            LastModifiedAt = new DateTime(2025, 4, 24, 22, 18, 24, 501, DateTimeKind.Utc).AddTicks(9766),
                            LastModifiedBy = "System",
                            Name = "Reportes",
                            Route = "/reports"
                        });
                });

            modelBuilder.Entity("AuthSystem.Domain.Entities.Permission", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("CreatedBy")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("Description")
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<DateTime?>("LastModifiedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("LastModifiedBy")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("Id");

                    b.HasIndex("Name")
                        .IsUnique();

                    b.ToTable("Permissions", (string)null);

                    b.HasData(
                        new
                        {
                            Id = new Guid("2a1ccb43-fa4f-48ce-b148-32d3bd6dae19"),
                            CreatedAt = new DateTime(2025, 4, 24, 22, 18, 24, 397, DateTimeKind.Utc).AddTicks(7781),
                            CreatedBy = "System",
                            Description = "Permiso para ver usuarios",
                            IsActive = true,
                            LastModifiedAt = new DateTime(2025, 4, 24, 22, 18, 24, 397, DateTimeKind.Utc).AddTicks(7782),
                            LastModifiedBy = "System",
                            Name = "Users.View"
                        },
                        new
                        {
                            Id = new Guid("5c3a4a58-2c25-4a9d-b641-a7a35f9d3c95"),
                            CreatedAt = new DateTime(2025, 4, 24, 22, 18, 24, 397, DateTimeKind.Utc).AddTicks(7784),
                            CreatedBy = "System",
                            Description = "Permiso para crear usuarios",
                            IsActive = true,
                            LastModifiedAt = new DateTime(2025, 4, 24, 22, 18, 24, 397, DateTimeKind.Utc).AddTicks(7785),
                            LastModifiedBy = "System",
                            Name = "Users.Create"
                        },
                        new
                        {
                            Id = new Guid("7b073c81-8bcd-4a93-96e3-8ef64b87960f"),
                            CreatedAt = new DateTime(2025, 4, 24, 22, 18, 24, 397, DateTimeKind.Utc).AddTicks(7786),
                            CreatedBy = "System",
                            Description = "Permiso para editar usuarios",
                            IsActive = true,
                            LastModifiedAt = new DateTime(2025, 4, 24, 22, 18, 24, 397, DateTimeKind.Utc).AddTicks(7786),
                            LastModifiedBy = "System",
                            Name = "Users.Edit"
                        },
                        new
                        {
                            Id = new Guid("a9bb2c4d-4c46-4eba-b27a-4b2127a0df5f"),
                            CreatedAt = new DateTime(2025, 4, 24, 22, 18, 24, 397, DateTimeKind.Utc).AddTicks(7788),
                            CreatedBy = "System",
                            Description = "Permiso para eliminar usuarios",
                            IsActive = true,
                            LastModifiedAt = new DateTime(2025, 4, 24, 22, 18, 24, 397, DateTimeKind.Utc).AddTicks(7788),
                            LastModifiedBy = "System",
                            Name = "Users.Delete"
                        },
                        new
                        {
                            Id = new Guid("c4f907db-0f34-4610-b3cc-9fd1c4d323e7"),
                            CreatedAt = new DateTime(2025, 4, 24, 22, 18, 24, 397, DateTimeKind.Utc).AddTicks(7789),
                            CreatedBy = "System",
                            Description = "Permiso para ver módulos",
                            IsActive = true,
                            LastModifiedAt = new DateTime(2025, 4, 24, 22, 18, 24, 397, DateTimeKind.Utc).AddTicks(7790),
                            LastModifiedBy = "System",
                            Name = "Modules.View"
                        },
                        new
                        {
                            Id = new Guid("7b8e8c2f-d39a-4b1a-b11e-0e39d3b7d8f3"),
                            CreatedAt = new DateTime(2025, 4, 24, 22, 18, 24, 397, DateTimeKind.Utc).AddTicks(7791),
                            CreatedBy = "System",
                            Description = "Permiso para crear módulos",
                            IsActive = true,
                            LastModifiedAt = new DateTime(2025, 4, 24, 22, 18, 24, 397, DateTimeKind.Utc).AddTicks(7792),
                            LastModifiedBy = "System",
                            Name = "Modules.Create"
                        },
                        new
                        {
                            Id = new Guid("e5d4c4f4-4a4f-4a4f-b0d1-302c9d40e00f"),
                            CreatedAt = new DateTime(2025, 4, 24, 22, 18, 24, 397, DateTimeKind.Utc).AddTicks(7793),
                            CreatedBy = "System",
                            Description = "Permiso para editar módulos",
                            IsActive = true,
                            LastModifiedAt = new DateTime(2025, 4, 24, 22, 18, 24, 397, DateTimeKind.Utc).AddTicks(7794),
                            LastModifiedBy = "System",
                            Name = "Modules.Edit"
                        },
                        new
                        {
                            Id = new Guid("f8b2c5d5-5a5a-5a5a-c0e2-413d4e51f11f"),
                            CreatedAt = new DateTime(2025, 4, 24, 22, 18, 24, 397, DateTimeKind.Utc).AddTicks(7795),
                            CreatedBy = "System",
                            Description = "Permiso para eliminar módulos",
                            IsActive = true,
                            LastModifiedAt = new DateTime(2025, 4, 24, 22, 18, 24, 397, DateTimeKind.Utc).AddTicks(7796),
                            LastModifiedBy = "System",
                            Name = "Modules.Delete"
                        });
                });

            modelBuilder.Entity("AuthSystem.Domain.Entities.PermissionModule", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("CreatedBy")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<DateTime?>("LastModifiedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("LastModifiedBy")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<Guid>("ModuleId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("PermissionId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("ModuleId");

                    b.HasIndex("PermissionId", "ModuleId")
                        .IsUnique();

                    b.ToTable("PermissionModules", (string)null);
                });

            modelBuilder.Entity("AuthSystem.Domain.Entities.PermissionRoute", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("CreatedBy")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<bool>("IsActive")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(true);

                    b.Property<DateTime?>("LastModifiedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("LastModifiedBy")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<Guid>("PermissionId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("RouteId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("RouteId");

                    b.HasIndex("PermissionId", "RouteId")
                        .IsUnique();

                    b.ToTable("PermissionRoutes", (string)null);
                });

            modelBuilder.Entity("AuthSystem.Domain.Entities.Role", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("CreatedBy")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("Description")
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<DateTime?>("LastModifiedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("LastModifiedBy")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("Id");

                    b.HasIndex("Name")
                        .IsUnique();

                    b.ToTable("Roles", (string)null);

                    b.HasData(
                        new
                        {
                            Id = new Guid("d7e350e8-5fb7-4517-b8da-6f602d66a3a9"),
                            CreatedAt = new DateTime(2025, 4, 24, 22, 18, 24, 397, DateTimeKind.Utc).AddTicks(7573),
                            CreatedBy = "System",
                            Description = "Administrador del sistema",
                            IsActive = true,
                            LastModifiedAt = new DateTime(2025, 4, 24, 22, 18, 24, 397, DateTimeKind.Utc).AddTicks(7577),
                            LastModifiedBy = "System",
                            Name = "Admin"
                        },
                        new
                        {
                            Id = new Guid("f7d36113-51ea-4448-a9d2-d9151d5ac28b"),
                            CreatedAt = new DateTime(2025, 4, 24, 22, 18, 24, 397, DateTimeKind.Utc).AddTicks(7585),
                            CreatedBy = "System",
                            Description = "Usuario estándar",
                            IsActive = true,
                            LastModifiedAt = new DateTime(2025, 4, 24, 22, 18, 24, 397, DateTimeKind.Utc).AddTicks(7586),
                            LastModifiedBy = "System",
                            Name = "User"
                        });
                });

            modelBuilder.Entity("AuthSystem.Domain.Entities.RolePermission", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("CreatedBy")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<DateTime?>("LastModifiedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("LastModifiedBy")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<Guid>("PermissionId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("RoleId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("PermissionId");

                    b.HasIndex("RoleId", "PermissionId")
                        .IsUnique();

                    b.ToTable("RolePermissions", (string)null);

                    b.HasData(
                        new
                        {
                            Id = new Guid("45b538a2-045a-4077-bae7-8496dddc0859"),
                            CreatedAt = new DateTime(2025, 4, 24, 22, 18, 24, 501, DateTimeKind.Utc).AddTicks(9288),
                            CreatedBy = "System",
                            IsActive = true,
                            LastModifiedAt = new DateTime(2025, 4, 24, 22, 18, 24, 501, DateTimeKind.Utc).AddTicks(9289),
                            LastModifiedBy = "System",
                            PermissionId = new Guid("2a1ccb43-fa4f-48ce-b148-32d3bd6dae19"),
                            RoleId = new Guid("d7e350e8-5fb7-4517-b8da-6f602d66a3a9")
                        },
                        new
                        {
                            Id = new Guid("50076e2d-8bc9-4d01-9120-ae2d0d6a478e"),
                            CreatedAt = new DateTime(2025, 4, 24, 22, 18, 24, 501, DateTimeKind.Utc).AddTicks(9291),
                            CreatedBy = "System",
                            IsActive = true,
                            LastModifiedAt = new DateTime(2025, 4, 24, 22, 18, 24, 501, DateTimeKind.Utc).AddTicks(9303),
                            LastModifiedBy = "System",
                            PermissionId = new Guid("5c3a4a58-2c25-4a9d-b641-a7a35f9d3c95"),
                            RoleId = new Guid("d7e350e8-5fb7-4517-b8da-6f602d66a3a9")
                        },
                        new
                        {
                            Id = new Guid("f5396224-68b7-417b-a554-794862886053"),
                            CreatedAt = new DateTime(2025, 4, 24, 22, 18, 24, 501, DateTimeKind.Utc).AddTicks(9311),
                            CreatedBy = "System",
                            IsActive = true,
                            LastModifiedAt = new DateTime(2025, 4, 24, 22, 18, 24, 501, DateTimeKind.Utc).AddTicks(9312),
                            LastModifiedBy = "System",
                            PermissionId = new Guid("7b073c81-8bcd-4a93-96e3-8ef64b87960f"),
                            RoleId = new Guid("d7e350e8-5fb7-4517-b8da-6f602d66a3a9")
                        },
                        new
                        {
                            Id = new Guid("85e642cf-c7a1-4f52-9bb6-a7dad5b70fbf"),
                            CreatedAt = new DateTime(2025, 4, 24, 22, 18, 24, 501, DateTimeKind.Utc).AddTicks(9321),
                            CreatedBy = "System",
                            IsActive = true,
                            LastModifiedAt = new DateTime(2025, 4, 24, 22, 18, 24, 501, DateTimeKind.Utc).AddTicks(9321),
                            LastModifiedBy = "System",
                            PermissionId = new Guid("a9bb2c4d-4c46-4eba-b27a-4b2127a0df5f"),
                            RoleId = new Guid("d7e350e8-5fb7-4517-b8da-6f602d66a3a9")
                        },
                        new
                        {
                            Id = new Guid("f9dbec3e-4842-457f-a940-e2737584c8d4"),
                            CreatedAt = new DateTime(2025, 4, 24, 22, 18, 24, 501, DateTimeKind.Utc).AddTicks(9323),
                            CreatedBy = "System",
                            IsActive = true,
                            LastModifiedAt = new DateTime(2025, 4, 24, 22, 18, 24, 501, DateTimeKind.Utc).AddTicks(9323),
                            LastModifiedBy = "System",
                            PermissionId = new Guid("2a1ccb43-fa4f-48ce-b148-32d3bd6dae19"),
                            RoleId = new Guid("f7d36113-51ea-4448-a9d2-d9151d5ac28b")
                        },
                        new
                        {
                            Id = new Guid("9c7ad25f-8024-418f-a592-22f2dac6c238"),
                            CreatedAt = new DateTime(2025, 4, 24, 22, 18, 24, 501, DateTimeKind.Utc).AddTicks(9327),
                            CreatedBy = "System",
                            IsActive = true,
                            LastModifiedAt = new DateTime(2025, 4, 24, 22, 18, 24, 501, DateTimeKind.Utc).AddTicks(9327),
                            LastModifiedBy = "System",
                            PermissionId = new Guid("c4f907db-0f34-4610-b3cc-9fd1c4d323e7"),
                            RoleId = new Guid("d7e350e8-5fb7-4517-b8da-6f602d66a3a9")
                        },
                        new
                        {
                            Id = new Guid("09324def-36fb-4c3b-bbec-4c71f6424710"),
                            CreatedAt = new DateTime(2025, 4, 24, 22, 18, 24, 501, DateTimeKind.Utc).AddTicks(9329),
                            CreatedBy = "System",
                            IsActive = true,
                            LastModifiedAt = new DateTime(2025, 4, 24, 22, 18, 24, 501, DateTimeKind.Utc).AddTicks(9329),
                            LastModifiedBy = "System",
                            PermissionId = new Guid("7b8e8c2f-d39a-4b1a-b11e-0e39d3b7d8f3"),
                            RoleId = new Guid("d7e350e8-5fb7-4517-b8da-6f602d66a3a9")
                        },
                        new
                        {
                            Id = new Guid("63fe07c8-dd7e-4f05-af4b-cab265fc484d"),
                            CreatedAt = new DateTime(2025, 4, 24, 22, 18, 24, 501, DateTimeKind.Utc).AddTicks(9330),
                            CreatedBy = "System",
                            IsActive = true,
                            LastModifiedAt = new DateTime(2025, 4, 24, 22, 18, 24, 501, DateTimeKind.Utc).AddTicks(9331),
                            LastModifiedBy = "System",
                            PermissionId = new Guid("e5d4c4f4-4a4f-4a4f-b0d1-302c9d40e00f"),
                            RoleId = new Guid("d7e350e8-5fb7-4517-b8da-6f602d66a3a9")
                        },
                        new
                        {
                            Id = new Guid("beb496d6-60c2-4020-8cc0-b9c99c164c26"),
                            CreatedAt = new DateTime(2025, 4, 24, 22, 18, 24, 501, DateTimeKind.Utc).AddTicks(9332),
                            CreatedBy = "System",
                            IsActive = true,
                            LastModifiedAt = new DateTime(2025, 4, 24, 22, 18, 24, 501, DateTimeKind.Utc).AddTicks(9333),
                            LastModifiedBy = "System",
                            PermissionId = new Guid("f8b2c5d5-5a5a-5a5a-c0e2-413d4e51f11f"),
                            RoleId = new Guid("d7e350e8-5fb7-4517-b8da-6f602d66a3a9")
                        });
                });

            modelBuilder.Entity("AuthSystem.Domain.Entities.RoleRoute", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<bool>("IsActive")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(true);

                    b.Property<DateTime>("LastModifiedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("LastModifiedBy")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<Guid>("RoleId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("RouteId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("RouteId");

                    b.HasIndex("RoleId", "RouteId")
                        .IsUnique();

                    b.ToTable("RoleRoutes");
                });

            modelBuilder.Entity("AuthSystem.Domain.Entities.Route", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("Description")
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<int>("DisplayOrder")
                        .HasColumnType("int");

                    b.Property<string>("HttpMethod")
                        .IsRequired()
                        .HasMaxLength(10)
                        .HasColumnType("nvarchar(10)");

                    b.Property<bool>("IsActive")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(true);

                    b.Property<bool>("IsEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTime>("LastModifiedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("LastModifiedBy")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<Guid>("ModuleId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("Path")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<bool>("RequiresAuth")
                        .HasColumnType("bit");

                    b.HasKey("Id");

                    b.HasIndex("ModuleId");

                    b.HasIndex("Name", "ModuleId")
                        .IsUnique();

                    b.HasIndex("Path", "HttpMethod")
                        .IsUnique();

                    b.ToTable("Routes");
                });

            modelBuilder.Entity("AuthSystem.Domain.Entities.User", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("ConcurrencyStamp")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("CreatedBy")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("FullName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<DateTime?>("LastModifiedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("LastModifiedBy")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<DateTime?>("LastPasswordChangeAt")
                        .HasColumnType("datetime2");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("PasswordHash")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("PasswordResetToken")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<DateTime?>("PasswordResetTokenExpiry")
                        .HasColumnType("datetime2");

                    b.Property<string>("PhoneNumber")
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("SecurityStamp")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("TwoFactorRecoveryCode")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("TwoFactorSecretKey")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<int>("UserStatus")
                        .HasColumnType("int");

                    b.Property<int>("UserType")
                        .HasColumnType("int");

                    b.Property<string>("Username")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("Id");

                    b.HasIndex("Email")
                        .IsUnique();

                    b.HasIndex("Username")
                        .IsUnique();

                    b.ToTable("Users", (string)null);

                    b.HasData(
                        new
                        {
                            Id = new Guid("bcab4262-01ff-410f-9948-179b1cf9154b"),
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "9368ff47-4d98-41f5-b1d4-e08cb64f3c7a",
                            CreatedAt = new DateTime(2025, 4, 24, 22, 18, 24, 501, DateTimeKind.Utc).AddTicks(8659),
                            CreatedBy = "System",
                            Email = "admin@example.com",
                            EmailConfirmed = true,
                            FullName = "Administrator",
                            IsActive = true,
                            LastModifiedAt = new DateTime(2025, 4, 24, 22, 18, 24, 501, DateTimeKind.Utc).AddTicks(8665),
                            LastModifiedBy = "System",
                            LockoutEnabled = true,
                            PasswordHash = "$2a$11$kvAUOkk4cCMwVPpGrE1eEuM9xfwdS.XfMQltB6QeAi8YzYbEtFV9C",
                            PhoneNumberConfirmed = true,
                            SecurityStamp = "791bd9f3-5d45-4090-a0fe-238c0b7cb5f0",
                            TwoFactorEnabled = false,
                            UserStatus = 1,
                            UserType = 1,
                            Username = "admin"
                        });
                });

            modelBuilder.Entity("AuthSystem.Domain.Entities.UserRole", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("CreatedBy")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<DateTime?>("LastModifiedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("LastModifiedBy")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<Guid>("RoleId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.HasIndex("UserId", "RoleId")
                        .IsUnique();

                    b.ToTable("UserRoles", (string)null);

                    b.HasData(
                        new
                        {
                            Id = new Guid("1d02448e-45ca-496f-b2a1-a51858cc0c4b"),
                            CreatedAt = new DateTime(2025, 4, 24, 22, 18, 24, 501, DateTimeKind.Utc).AddTicks(9184),
                            CreatedBy = "System",
                            IsActive = true,
                            LastModifiedAt = new DateTime(2025, 4, 24, 22, 18, 24, 501, DateTimeKind.Utc).AddTicks(9184),
                            LastModifiedBy = "System",
                            RoleId = new Guid("d7e350e8-5fb7-4517-b8da-6f602d66a3a9"),
                            UserId = new Guid("bcab4262-01ff-410f-9948-179b1cf9154b")
                        });
                });

            modelBuilder.Entity("AuthSystem.Domain.Entities.UserSession", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("CreatedBy")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("DeviceInfo")
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<DateTime>("ExpiresAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("IpAddress")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<DateTime>("LastActivity")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("LastModifiedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("LastModifiedBy")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("RefreshToken")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("RefreshToken")
                        .IsUnique();

                    b.HasIndex("UserId");

                    b.ToTable("UserSessions", (string)null);
                });

            modelBuilder.Entity("AuthSystem.Domain.Entities.ActivationCode", b =>
                {
                    b.HasOne("AuthSystem.Domain.Entities.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("AuthSystem.Domain.Entities.Module", b =>
                {
                    b.HasOne("AuthSystem.Domain.Entities.Module", "Parent")
                        .WithMany("Children")
                        .HasForeignKey("ParentId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.Navigation("Parent");
                });

            modelBuilder.Entity("AuthSystem.Domain.Entities.PermissionModule", b =>
                {
                    b.HasOne("AuthSystem.Domain.Entities.Module", "Module")
                        .WithMany("PermissionModules")
                        .HasForeignKey("ModuleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("AuthSystem.Domain.Entities.Permission", "Permission")
                        .WithMany("PermissionModules")
                        .HasForeignKey("PermissionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Module");

                    b.Navigation("Permission");
                });

            modelBuilder.Entity("AuthSystem.Domain.Entities.PermissionRoute", b =>
                {
                    b.HasOne("AuthSystem.Domain.Entities.Permission", "Permission")
                        .WithMany("PermissionRoutes")
                        .HasForeignKey("PermissionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("AuthSystem.Domain.Entities.Route", "Route")
                        .WithMany("PermissionRoutes")
                        .HasForeignKey("RouteId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Permission");

                    b.Navigation("Route");
                });

            modelBuilder.Entity("AuthSystem.Domain.Entities.RolePermission", b =>
                {
                    b.HasOne("AuthSystem.Domain.Entities.Permission", "Permission")
                        .WithMany("RolePermissions")
                        .HasForeignKey("PermissionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("AuthSystem.Domain.Entities.Role", "Role")
                        .WithMany("RolePermissions")
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Permission");

                    b.Navigation("Role");
                });

            modelBuilder.Entity("AuthSystem.Domain.Entities.RoleRoute", b =>
                {
                    b.HasOne("AuthSystem.Domain.Entities.Role", "Role")
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("AuthSystem.Domain.Entities.Route", "Route")
                        .WithMany("RoleRoutes")
                        .HasForeignKey("RouteId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Role");

                    b.Navigation("Route");
                });

            modelBuilder.Entity("AuthSystem.Domain.Entities.Route", b =>
                {
                    b.HasOne("AuthSystem.Domain.Entities.Module", "Module")
                        .WithMany("Routes")
                        .HasForeignKey("ModuleId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Module");
                });

            modelBuilder.Entity("AuthSystem.Domain.Entities.UserRole", b =>
                {
                    b.HasOne("AuthSystem.Domain.Entities.Role", "Role")
                        .WithMany("UserRoles")
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("AuthSystem.Domain.Entities.User", "User")
                        .WithMany("UserRoles")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Role");

                    b.Navigation("User");
                });

            modelBuilder.Entity("AuthSystem.Domain.Entities.UserSession", b =>
                {
                    b.HasOne("AuthSystem.Domain.Entities.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("AuthSystem.Domain.Entities.Module", b =>
                {
                    b.Navigation("Children");

                    b.Navigation("PermissionModules");

                    b.Navigation("Routes");
                });

            modelBuilder.Entity("AuthSystem.Domain.Entities.Permission", b =>
                {
                    b.Navigation("PermissionModules");

                    b.Navigation("PermissionRoutes");

                    b.Navigation("RolePermissions");
                });

            modelBuilder.Entity("AuthSystem.Domain.Entities.Role", b =>
                {
                    b.Navigation("RolePermissions");

                    b.Navigation("UserRoles");
                });

            modelBuilder.Entity("AuthSystem.Domain.Entities.Route", b =>
                {
                    b.Navigation("PermissionRoutes");

                    b.Navigation("RoleRoutes");
                });

            modelBuilder.Entity("AuthSystem.Domain.Entities.User", b =>
                {
                    b.Navigation("UserRoles");
                });
#pragma warning restore 612, 618
        }
    }
}
